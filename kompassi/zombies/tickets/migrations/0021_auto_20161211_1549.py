# Generated by Django 1.9.9 on 2016-12-11 13:49


import re

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("tickets", "0020_auto_20160706_2207"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="customer",
            options={"verbose_name": "customer", "verbose_name_plural": "customers"},
        ),
        migrations.AlterModelOptions(
            name="limitgroup",
            options={"verbose_name": "limit group", "verbose_name_plural": "limit groups"},
        ),
        migrations.AlterModelOptions(
            name="product",
            options={"verbose_name": "product", "verbose_name_plural": "products"},
        ),
        migrations.AlterModelOptions(
            name="ticketseventmeta",
            options={
                "verbose_name": "ticket sales settings for event",
                "verbose_name_plural": "ticket sales settings for events",
            },
        ),
        migrations.AlterField(
            model_name="customer",
            name="address",
            field=models.CharField(max_length=200, verbose_name="Address"),
        ),
        migrations.AlterField(
            model_name="customer",
            name="allow_marketing_email",
            field=models.BooleanField(
                default=True, verbose_name="Allow sending news and other information related to this event via e-mail"
            ),
        ),
        migrations.AlterField(
            model_name="customer",
            name="city",
            field=models.CharField(max_length=255, verbose_name="City"),
        ),
        migrations.AlterField(
            model_name="customer",
            name="email",
            field=models.EmailField(
                help_text="Check the e-mail address carefully. The order confirmation and any electronic tickets will be sent to this e-mail address. NOTE: We have had significant trouble with e-mail delivery to webmail services of Microsoft (Hotmail, Live.com, Outlook.com etc). If possible, we recommend using an e-mail address other than one provided by Microsoft, such as GMail.",
                max_length=254,
                verbose_name="E-mail address",
            ),
        ),
        migrations.AlterField(
            model_name="customer",
            name="first_name",
            field=models.CharField(max_length=100, verbose_name="First name"),
        ),
        migrations.AlterField(
            model_name="customer",
            name="last_name",
            field=models.CharField(max_length=100, verbose_name="Surname"),
        ),
        migrations.AlterField(
            model_name="customer",
            name="zip_code",
            field=models.CharField(max_length=5, verbose_name="Postal code"),
        ),
        migrations.AlterField(
            model_name="limitgroup",
            name="description",
            field=models.CharField(max_length=255, verbose_name="Description"),
        ),
        migrations.AlterField(
            model_name="limitgroup",
            name="event",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.Event", verbose_name="Event"),
        ),
        migrations.AlterField(
            model_name="limitgroup",
            name="limit",
            field=models.IntegerField(verbose_name="Maximum amount to sell"),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="contact_email",
            field=models.CharField(
                blank=True,
                help_text="Format: Fooevent Ticket Sales &lt;tickets@fooevent.example.com&gt;",
                max_length=255,
                validators=[django.core.validators.RegexValidator(re.compile("(?P<name>.+) <(?P<email>.+@.+\\..+)>"))],
                verbose_name="Contact e-mail address (with description)",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="due_days",
            field=models.IntegerField(default=14, verbose_name="Payment due (days)"),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="front_page_text",
            field=models.TextField(
                blank=True,
                default="",
                help_text="This text will be shown on the front page of the web shop.",
                verbose_name="Front page text",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="print_logo_height_mm",
            field=models.IntegerField(
                default=0,
                help_text="The height of the logo to be printed on electronic tickets, in millimeters. Roughly 20 mm recommended.",
                verbose_name="Logo height (mm)",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="print_logo_path",
            field=models.CharField(
                blank=True,
                default="",
                help_text="The file system path to a logo that will be printed on the electronic ticket.",
                max_length=255,
                verbose_name="Logo path",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="print_logo_width_mm",
            field=models.IntegerField(
                default=0,
                help_text="The width of the logo to be printed on electronic tickets, in millimeters. Roughly 40 mm recommended.",
                verbose_name="Logo width (mm)",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="receipt_footer",
            field=models.CharField(
                blank=True,
                default="",
                help_text="This text will be printed in the footer of printed receipts (for mail orders). Entering contact information here is recommended.",
                max_length=1023,
                verbose_name="Receipt footer",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="reference_number_template",
            field=models.CharField(
                default="{:04d}",
                help_text="Uses Python .format() string formatting.",
                max_length=31,
                verbose_name="Reference number template",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="reservation_seconds",
            field=models.IntegerField(
                default=1800,
                help_text="This is how long the customer has after confirmation to complete the payment. NOTE: Currently unimplemented.",
                verbose_name="Reservation period (seconds)",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="shipping_and_handling_cents",
            field=models.IntegerField(default=0, verbose_name="Shipping and handling (cents)"),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="ticket_free_text",
            field=models.TextField(
                blank=True,
                help_text="This text will be printed in the electronic ticket.",
                verbose_name="E-ticket text",
            ),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="ticket_sales_ends",
            field=models.DateTimeField(blank=True, null=True, verbose_name="Ticket sales ends"),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="ticket_sales_starts",
            field=models.DateTimeField(blank=True, null=True, verbose_name="Ticket sales starts"),
        ),
        migrations.AlterField(
            model_name="ticketseventmeta",
            name="ticket_spam_email",
            field=models.CharField(
                blank=True,
                help_text="If set, all tickets-related e-mail messages will be also sent to this e-mail address.",
                max_length=255,
                verbose_name="Monitoring e-mail address",
            ),
        ),
    ]
